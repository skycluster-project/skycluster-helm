# {{ if .Values.install }}
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: scripts-cloud-init
#   namespace: {{ .Release.Namespace }}
#   labels:
#     skycluster.io/managed-by: skycluster
#     skycluster.io/script-type: provider-init
# data:
#   cloud-init: |
#     #cloud-config
#     write_files:
#       - path: /etc/networkd-dispatcher/routable.d/50-tailscale
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/sh
#           INTF_NAME=$(ip route get 8.8.8.8 | awk '{print $5; exit}')
#           echo "Enabling Segmentation Offload" >> /root/pre-install.log
#           # check out
#           # https://tailscale.com/kb/1320/performance-best-practices#linux-optimizations-for-subnet-routers-and-exit-nodes
#           if systemctl is-enabled networkd-dispatcher &>/dev/null; then
#             echo "networkd-dispatcher is enabled." >> /root/pre-install.log
#             ethtool -K $INTF_NAME rx-udp-gro-forwarding on rx-gro-list off
#           else
#             echo "networkd-dispatcher is not enabled. Skipping." >> /root/pre-install.log
#           fi
#       - path: /usr/local/share/ca-certificates/ca-certificate.crt
#         owner: root:root
#         permissions: '0755'
#         content: |
#           __CA_CERTIFICATE__
#       - path: /usr/local/bin/pre-install.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           echo "Setting iptables rules" >> /root/pre-install.log
#           INTF_NAME=$(ip route get 8.8.8.8 | awk '{print $5; exit}')
#           IP_ADDR=$(ip -o -4 addr show "$INTF_NAME" | awk '{print $4}' | cut -d/ -f1)
#           iptables -tnat -N sky-postrouting
#           iptables -tnat -A POSTROUTING -j sky-postrouting
#           iptables -tnat -A sky-postrouting -s 100.64.0.0/16 -o "$INTF_NAME" -j MASQUERADE
#           iptables -tnat -A sky-postrouting -s __SUBNETCIDR__ -o "$INTF_NAME" -j MASQUERADE
#           # Updating certificates
#           echo "Updating certificates" >> /root/pre-install.log
#           update-ca-certificates
#           # Replace IP address in the bird configuration file
#           echo "Replacing IP address in the bird configuration file" >> /root/pre-install.log
#           sed -i "s/__IP_ADDRESS__/$IP_ADDR/g" /etc/bird/bird.conf
#       - path: /etc/systemd/system/node_exporter.service
#         owner: root:root
#         permissions: '0644'
#         content: |
#           [Unit]
#           Description=Node Exporter
#           After=network.target

#           [Service]
#           ExecStart=/usr/local/bin/node_exporter

#           [Install]
#           WantedBy=multi-user.target
#       - path: /usr/local/bin/install-node-exporter.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           echo "I've been run" >> /root/node-exporter-install.log
#           install_node_exporter() {
#             wget -q -P /root https://github.com/prometheus/node_exporter/releases/download/v1.9.1/node_exporter-1.9.1.linux-amd64.tar.gz
#             if [ $? -eq 0 ]; then
#               echo "Download succeeded" >> /root/node-exporter-install.log
#               tar -zxvf /root/node_exporter-1.9.1.linux-amd64.tar.gz -C /root
#               mv /root/node_exporter-1.9.1.linux-amd64/node_exporter /usr/local/bin/
#               rm /root/node_exporter-1.9.1.linux-amd64.tar.gz
#               rm -rf /root/node_exporter-1.9.1.linux-amd64
#               return $?
#             else
#               echo "Download failed" >> /root/node-exporter-install.log
#               return 1
#             fi
#           }
#           # Loop until the installation succeeds
#           until install_node_exporter; do
#             echo "Installation failed, retrying..." >> /root/node-exporter-install.log
#             sleep 5 # Wait for 5 seconds before retrying
#           done
#           echo "Installation Completed" >> /root/node-exporter-install.log
#           systemctl daemon-reload
#           systemctl enable --now node_exporter
#           echo "Service activated" >> /root/node-exporter-install.log
#       - path: /usr/local/bin/install-tailscale.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           echo "I've been run" >> /root/tailscale-install.log
#           # Enable IP forwarding
#           echo "Enabling IP forwarding" >> /root/tailscale-install.log
#           sudo sed -i '/^#net.ipv4.ip_forward=1/s/^#//g' /etc/sysctl.conf
#           sudo sed -i '/^#net.ipv6.conf.all.forwarding=1/s/^#//g' /etc/sysctl.conf
#           sysctl -p
#           # Function to install Tailscale
#           install_tailscale() {
#             wget -q -P /root https://tailscale.com/install.sh
#             if [ $? -eq 0 ]; then
#               echo "Download succeeded" >> /root/tailscale-install.log
#               DEBIAN_FRONTEND=noninteractive apt-get update
#               sh /root/install.sh >> /root/tailscale-install.log 2>&1
#               return $?
#             else
#               echo "Download failed" >> /root/tailscale-install.log
#               return 1
#             fi
#           }
#           # Loop until the installation succeeds
#           until install_tailscale; do
#             echo "Installation failed, retrying..." >> /root/tailscale-install.log
#             sleep 5 # Wait for 5 seconds before retrying
#           done
#           echo "Installation Completed" >> /root/tailscale-install.log
#       - path: /usr/local/bin/setup-tailscale.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           echo $(date) >> /root/tailscale-setup.log
#           # Loop until the tailscale command is available
#           while ! command -v tailscale &> /dev/null; do
#               echo "tailscale not found, retrying in 5 seconds..." >> /root/tailscale-setup.log
#               sleep 5
#           done
#           echo "tailscale is available" >> /root/tailscale-setup.log
#           LOGIN_URL=__OVERLAY_HOSTURL__:__OVERLAY_PORT__
#           AUTH_KEY=__OVERLAY_TOKEN__
#           HOSTNAME=__OVERLAY_HOSTNAME__
#           echo "Running tailscale" >> /root/tailscale-setup.log
#           echo "--login-server $LOGIN_URL" >> /root/tailscale-setup.log
#           echo "--auth-key $AUTH_KEY" >> /root/tailscale-setup.log
#           echo "--hostname $HOSTNAME" >> /root/tailscale-setup.log
          
#           # There is a bug that prevents node registration with advertise-routes in the first run
#           # See https://github.com/juanfont/headscale/issues/2485
#           # We handle this by running a script in the server side for now.
#           while true; do
#             if tailscale up --login-server $LOGIN_URL --auth-key $AUTH_KEY --hostname $HOSTNAME --advertise-routes __SUBNETCIDR__ --accept-routes; then
#               echo "Tailscale connected successfully" >> /root/tailscale-setup.log
#               break
#             else
#               echo "Tailscale connection failed, retrying in 10 seconds..." >> /root/tailscale-setup.log
#               sleep 5
#             fi
#           done
#           if iptables -tnat -C ts-postrouting -m mark --mark 0x40000/0xff0000 -j MASQUERADE 2>/dev/null; then
#             iptables -tnat -D ts-postrouting -m mark --mark 0x40000/0xff0000 -j MASQUERADE
#           fi
#           echo $(date) >> /root/tailscale-setup.log
#       - path: /usr/local/bin/ping-check.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           echo $(date) >> /root/ping-check.log

#           ping_ip() {
#             local ip="$1"
#             nc -z -w2 "$ip" 22
#             if [ $? -eq 0 ]; then
#               echo "$ip is reachable =)"
#             else
#               nc -z -w1 "$ip" 22
#               if [ $? -ne 0 ]; then
#                 echo "-- $ip IS NOT REACHABLE."
#               else
#                 echo "$ip is reachable =)"
#               fi
#             fi
#           }

#           for ii in `sudo tailscale status | awk '{print $2}' | tail -n +2`; do 
#             IP=`sudo tailscale ip --4 $ii` && ping_ip $IP >> /root/ping-check.log; 
#           done
#       - path: /etc/bird/bird.conf
#         owner: root:root
#         permissions: '644'
#         content: |
#           log syslog all;
#           log "/var/log/bird.log" { debug, trace, info, remote, warning, error, auth, fatal, bug };
#           debug protocols all;
#           define my_asn = __AS_NUMBER__;
#           define my_addr = __IP_ADDRESS__;
#           protocol device {
#           }
#           protocol direct {
#             disabled;	
#             ipv4;			
#             ipv6;			
#           }
#           protocol kernel {
#             ipv4 {	
#                   export all;	
#             };
#           }
#           protocol kernel {
#             ipv6 { export all; };
#           }
#           protocol static {
#             ipv4;
#           }
#           protocol bgp uplink1 {
#             description "Regional BGP uplink";
#             local my_addr as my_asn;
#             direct;
#             neighbor range __SUBNETCIDR__ internal;
#             ipv4 {
#               import all;
#             };
#           }
#       - path: /usr/local/bin/setup-bgp.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           echo "Enabling BGP" >> /root/bgp-setup.log
#           mkdir -p /var/log
#           touch /var/log/bird.log && chmod 666 /var/log/bird.log
#           INTF_NAME=$(ip route get 8.8.8.8 | awk '{print $5; exit}')
#           ip route add __POD_SUBNET_CIDR__ dev $INTF_NAME
#           install_bird2() {
#             DEBIAN_FRONTEND=noninteractive apt-get update && \
#               DEBIAN_FRONTEND=noninteractive apt-get install -y bird2 \
#               -o Dpkg::Options::="--force-confdef" \
#               -o Dpkg::Options::="--force-confold"
#             if [ $? -eq 0 ]; then
#               echo "bird2 installation succeeded" >> /root/bird2-install.log
#               return 0
#             else
#               echo "bird2 installation failed" >> /root/bird2-install.log
#               return 1
#             fi
#           }       
#           # Loop until the installation succeeds
#           until install_bird2; do
#             echo "Installation failed, retrying..." >> /root/bird2-install.log
#             sleep 5 # Wait for 5 seconds before retrying
#           done
#           echo "Installation Completed" >> /root/bird2-install.log
#           # Create the bird2 configuration file
#     runcmd:
#       - /usr/local/bin/pre-install.sh
#       - /usr/local/bin/install-tailscale.sh
#       - /usr/local/bin/setup-tailscale.sh
#       - |
#         crontab -u root -l 2>/dev/null > /tmp/mycron || true
#         echo "* * * * * sudo /usr/local/bin/setup-tailscale.sh" >> /tmp/mycron
#         echo "* * * * * sleep 15 && sudo /usr/local/bin/setup-tailscale.sh" >> /tmp/mycron
#         echo "* * * * * sleep 30 && sudo /usr/local/bin/setup-tailscale.sh" >> /tmp/mycron
#         echo "* * * * * sleep 45 && sudo /usr/local/bin/setup-tailscale.sh" >> /tmp/mycron
#         echo "* * * * * sudo /usr/local/bin/ping-check.sh" >> /tmp/mycron
#         echo "* * * * * sleep 10 && sudo /usr/local/bin/ping-check.sh" >> /tmp/mycron
#         echo "* * * * * sleep 20 && sudo /usr/local/bin/ping-check.sh" >> /tmp/mycron
#         echo "* * * * * sleep 30 && sudo /usr/local/bin/ping-check.sh" >> /tmp/mycron
#         echo "* * * * * sleep 40 && sudo /usr/local/bin/ping-check.sh" >> /tmp/mycron
#         echo "* * * * * sleep 50 && sudo /usr/local/bin/ping-check.sh" >> /tmp/mycron
#         crontab -u root /tmp/mycron
#       - /usr/local/bin/setup-bgp.sh
#       - /etc/networkd-dispatcher/routable.d/50-tailscale
#       - /usr/local/bin/install-node-exporter.sh
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: script-k3s-controller
#   namespace: {{ .Release.Namespace }}
#   labels:
#     skycluster.io/managed-by: skycluster
#     skycluster.io/script-type: k3s-controller
# data:
#   cloud-init: |
#     #cloud-config
#     write_files:
#       - path: /usr/local/bin/k3s-install.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           export USERNAME=`whoami`
#           export K3S_HOME=/home/$USERNAME/k3s
#           export KUBECONFIG=$K3S_HOME/k3s.yaml
#           export K3S_URL_FILE="https://dl.skycluster.io/k3s"
#           export K3S_BIN="/usr/local/bin"

#           mkdir -p $K3S_HOME
#           mkdir -p $K3S_BIN
#           mkdir -p $K3S_HOME/scripts
#           mkdir -p $K3S_HOME/logs
          
#           exec > "$K3S_HOME/logs/k3s-install-$(date +'%Y-%m-%d_%H-%M').log" 2>&1

#           export INTF_NAME=$(ip route get 8.8.8.8 | awk '{print $5; exit}')
#           if ! ip -o -4 a show | grep -q $INTF_NAME; then
#             echo "Error: interface not found."
#             exit 1
#           fi
#           export NODE_IP=`ip -o -4 a show $INTF_NAME | awk '{print $4}' | cut -d/ -f1`

#           max_retries=10
#           retry_count=0
#           install_success=false
#           while [ $retry_count -lt $max_retries ]; do
#             if curl --max-time 80 -sfL --retry 3 -C - "$K3S_URL_FILE" -o "$K3S_BIN/k3s"; then 
#               echo "INFO: Downloaded k3s binary"
#               chmod +x "$K3S_BIN/k3s"
#               echo "Installing k3s..."
#               if curl -sfL https://get.k3s.io | \
#                 INSTALL_K3S_SKIP_DOWNLOAD=true \
#                 K3S_KUBECONFIG_MODE="644" \
#                 INSTALL_K3S_EXEC=" \
#                   --node-ip $NODE_IP \
#                   --service-cidr 192.168.0.0/16 \
#                   --cluster-dns 192.168.0.10 \
#                   --flannel-backend=none \
#                   --disable-network-policy \
#                   --disable=traefik \
#                   --node-label skycluster.io/node-type=control-plane \
#                   --node-label skycluster.io/provider-identifier=__PROVIDERNAME__-__REGION__-__ZONE__ \
#                   --node-label topology.kubernetes.io/region=__PROVIDERNAME__-__REGION__-__ZONE__ \
#                   --node-label topology.kubernetes.io/zone=__PROVIDERNAME__-__REGION__-__ZONE__ \
#                   --node-label skycluster.io/provider-region=__REGION__ " sh -; then
#                 install_success=true
#                 break
#               else
#                 echo "Attempt $(($retry_count + 1)) of $max_retries failed. Retrying..." 
#                 retry_count=$(($retry_count + 1))
#                 sleep 5
#               fi
#             else
#               echo "Downloading k3s Attempt $(($retry_count + 1)) of $max_retries failed. Retrying..."
#               retry_count=$(($retry_count + 1))
#               sleep 5
#             fi
#           done
#           if [ "$install_success" = false ]; then
#             echo "Error: Failed to install k3s after $max_retries attempts." 
#             exit 1
#           fi
#           sudo cp /etc/rancher/k3s/k3s.yaml $K3S_HOME/k3s.yaml
#           if [ $? -ne 0 ]; then
#             echo "Error: Failed to copy k3s.yaml." 
#             exit 1
#           fi
#           sudo chown $USERNAME $K3S_HOME/k3s.yaml 
#           if [ $? -ne 0 ]; then
#             echo "Error: Failed to change ownership of k3s.yaml." 
#             exit 1
#           fi
#           TOKEN=`sudo cat /var/lib/rancher/k3s/server/node-token`
#           if [ $? -ne 0 ]; then
#             echo "Error: Failed to read the node token." 
#             exit 1
#           fi
#           echo $TOKEN | tee $K3S_HOME/k3s.token > /dev/null
#           if [ $? -ne 0 ]; then
#             echo "Error: Failed to write the node token to the file." 
#             exit 1
#           fi
#           echo $TOKEN";"$NODE_IP >> $K3S_HOME/k3s.token.ip 
#       - path: /usr/local/bin/k3s-calico.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           set -e

#           # Redirect all output to output.log
#           exec > /root/k3s-calico.log 2>&1

#           # Function to wait for kubeconfig generation
#           wait_for_kubeconfig() {
#             local retries=50
#             local wait=5
#             for ((i=1;i<=retries;i++)); do
#               if sudo kubectl config view --flatten > /dev/null 2>&1; then
#                 echo "Kubeconfig is valid."
#                 return 0
#               else
#                 echo "Kubeconfig file not generated yet. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "kubeconfig file not generated after $retries attempts!"
#             exit 1
#           }

#           wait_for_kubeconfig

#           export PRIVATE_REGISTRY=__PRIVATE_REG_NAME__

#           # Function to apply Tigera Operator with retries
#           apply_tigera_operator() {
#             local retries=5
#             local wait=10
#             for ((i=1;i<=retries;i++)); do

#               # Define the URL and output file
#               URL="https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/tigera-operator.yaml"
#               OUTPUT_FILE="tigera-operator.yaml"

#               # Download the file
#               curl -L "$URL" -o "$OUTPUT_FILE"

#               # If PRIVATE_REGISTRY is set, replace quay.io with its value in tigera-operator.yaml and custom-resources.yaml
#               if [ "$PRIVATE_REGISTRY" != "__PRIVATE_REG_NAME__" ]; then
#                 sed -i "s?quay.io?$PRIVATE_REGISTRY?g" "$OUTPUT_FILE"
#               fi

#               if kubectl create -f "$OUTPUT_FILE"; then
#                 echo "Tigera Operator applied successfully."
#                 return 0
#               else
#                 echo "Failed to apply Tigera Operator. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "Failed to apply Tigera Operator after $retries attempts."
#             exit 1
#           }

#           # Apply Tigera Operator
#           apply_tigera_operator

#           # Wait for Tigera Operator deployment to be available with retries
#           echo "Waiting for Tigera Operator to be ready..."
#           retries=12
#           wait=10
#           for ((i=1;i<=retries;i++)); do
#             if kubectl wait deployment/tigera-operator -n tigera-operator --for=condition=Available --timeout=30s; then
#               echo "Tigera Operator is ready."
#               break
#             else
#               echo "Tigera Operator not ready yet. Attempt $i/$retries."
#               if [ "$i" -eq "$retries" ]; then
#                 echo "Tigera Operator did not become ready in time."
#                 exit 1
#               fi
#               sleep $wait
#             fi
#           done
          
#           cat <<EOF | kubectl apply -f -
#           apiVersion: operator.tigera.io/v1
#           kind: APIServer
#           metadata:
#             name: default
#           spec: {}
#           EOF
#       - path: /usr/local/bin/k3s-metallb.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           set -e

#           # Redirect all output to output.log
#           exec > /root/k3s-metallb.log 2>&1

#           export PRIVATE_REGISTRY=__PRIVATE_REG_NAME__

#           # Function to wait for kubeconfig generation
#           wait_for_kubeconfig() {
#             local retries=50
#             local wait=5
#             for ((i=1;i<=retries;i++)); do
#               if sudo kubectl config view --flatten > /dev/null 2>&1; then
#                 echo "Kubeconfig is valid."
#                 return 0
#               else
#                 echo "Kubeconfig file not generated yet. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "kubeconfig file not generated after $retries attempts!"
#             exit 1
#           }

#           wait_for_kubeconfig

#           install_metallb() {
#             local retries=5
#             local wait=10
#             for ((i=1;i<=retries;i++)); do
#               URL="https://skycluster.io/configs/metallb-native-v0.14.9.yaml"
#               OUTPUT_FILE="metallb.yaml"
#               curl -L "$URL" -o "$OUTPUT_FILE"

#               # If PRIVATE_REGISTRY is set
#               if [ "$PRIVATE_REGISTRY" != "__PRIVATE_REG_NAME__" ]; then
#                 sed -i "s?quay.io?$PRIVATE_REGISTRY?g" "$OUTPUT_FILE"
#               fi
#               if kubectl create -f $OUTPUT_FILE; then
#                 echo "Metallb applied successfully."
#                 return 0
#               else
#                 echo "Failed to apply Metallb. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "Failed to apply Metallb after $retries attempts."
#             exit 1
#           }
#           install_metallb        
#       - path: /usr/local/bin/k3s-gw-api.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           set -e

#           # Redirect all output to output.log
#           exec > /root/k3s-gw-api.log 2>&1

#           # Function to wait for kubeconfig generation
#           wait_for_kubeconfig() {
#             local retries=50
#             local wait=5
#             for ((i=1;i<=retries;i++)); do
#               if sudo kubectl config view --flatten > /dev/null 2>&1; then
#                 echo "Kubeconfig is valid."
#                 return 0
#               else
#                 echo "Kubeconfig file not generated yet. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "kubeconfig file not generated after $retries attempts!"
#             exit 1
#           }

#           # Wait for kubeconfig
#           wait_for_kubeconfig

#           install_gw_api() {
#             local retries=5
#             local wait=10
#             for ((i=1;i<=retries;i++)); do
#               if kubectl create -f https://skycluster.io/configs/gateway-api-standard-v1.2.0.yaml; then
#                 echo "Gateway API applied successfully."
#                 return 0
#               else
#                 echo "Failed to install Gateway API. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "Failed to apply Gateway API after $retries attempts."
#             exit 1
#           }
#           install_gw_api
#       - path: /usr/local/bin/k3s-istio.sh
#         owner: root:root
#         permissions: '0755'
#         content: |
#           #!/bin/bash
#           set -e

#           # Redirect all output to output.log
#           exec > /root/k3s-istio.log 2>&1

#           export PRIVATE_REGISTRY=__PRIVATE_REG_NAME__

#           # Function to wait for kubeconfig generation
#           wait_for_kubeconfig() {
#             local retries=50
#             local wait=5
#             for ((i=1;i<=retries;i++)); do
#               if sudo kubectl config view --flatten > /dev/null 2>&1; then
#                 echo "Kubeconfig is valid."
#                 return 0
#               else
#                 echo "Kubeconfig file not generated yet. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "kubeconfig file not generated after $retries attempts!"
#             exit 1
#           }

#           wait_for_kubeconfig

#           install_istio() {
#             local retries=5
#             local wait=10
#             for ((i=1;i<=retries;i++)); do
#               URL="https://skycluster.io/configs/istio-base-v1.25.0.yaml"
#               OUTPUT_FILE="istio-base.yaml"
#               curl -L "$URL" -o "$OUTPUT_FILE"

#               # If PRIVATE_REGISTRY is set
#               if [ "$PRIVATE_REGISTRY" != "__PRIVATE_REG_NAME__" ]; then
#                 sed -i "s?docker.io?$PRIVATE_REGISTRY?g" "$OUTPUT_FILE"
#               fi
#               if kubectl apply -f $OUTPUT_FILE; then
#                 echo "Istio base applied successfully."
#                 return 0
#               else
#                 echo "Failed to install istio base. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "Failed to apply istio base after $retries attempts."
#             exit 1
#           }
#           install_istio

#           install_istio_deploy() {
#             local retries=5
#             local wait=10
#             for ((i=1;i<=retries;i++)); do
#               URL="https://skycluster.io/configs/istio-deploy-v1.25.0.yaml"
#               OUTPUT_FILE="istio-deploy.yaml"
#               curl -L "$URL" -o "$OUTPUT_FILE"

#               if [ "$PRIVATE_REGISTRY" != "__PRIVATE_REG_NAME__" ]; then
#                 sed -i "s?docker.io?$PRIVATE_REGISTRY?g" "$OUTPUT_FILE"
#               fi
#               if kubectl apply -f $OUTPUT_FILE; then
#                 echo "Istio deployment applied successfully."
#                 return 0
#               else
#                 echo "Failed to install istio deployment. Attempt $i/$retries."
#                 sleep $wait
#               fi
#             done
#             echo "Failed to apply istio deployment after $retries attempts."
#             exit 1
#           }
#           install_istio_deploy
#           kubectl label namespace default istio-injection=enabled

#     runcmd:
#       - /usr/local/bin/k3s-install.sh
#       - /usr/local/bin/k3s-calico.sh
#       - /usr/local/bin/k3s-metallb.sh
#       - /usr/local/bin/k3s-gw-api.sh
#       - /usr/local/bin/k3s-istio.sh

# {{ end }}