{{ if .Values.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-agent-routing-internal-gateway
  namespace: skycluster-system
  labels:
    skycluster.io/managed-by: skycluster
    skycluster.io/script-type: cloud-init
    skycluster.io/script-target: agent-init
    skycluster.io/script-init: routing-internal-gateway
data:
  cloud-init: |
    #cloud-config
    write_files:
      - path: /usr/local/bin/install-routes-internal-gateway.sh
        owner: root:root
        permissions: '0755'
        content: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Redirect all output (stdout + stderr) to log file
          exec > >(tee -a /root/routing-internal-gateway.logs) 2>&1

          GW_ADDR="__GW_ADDRESS__"

          # Check if GW_ADDR looks like an IP (basic validation)
          if ! [[ "$GW_ADDR" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
              echo "ERROR: Invalid gateway address: $GW_ADDR"
              exit 1
          fi

          # Caution: The route to the gateway returns the interface name as the third column
          # However, the route to the internet returns the interface name as the fifth column
          INTF_NAME=$(ip route get __GW_ADDRESS__ | awk '{print $3; exit}')
          if [[ -z "$INTF_NAME" ]]; then
              echo "ERROR: Could not determine interface for gateway $GW_ADDR"
              exit 1
          fi

          if sudo ip route add 10.0.0.0/8 via "$GW_ADDR" dev "$INTF_NAME"; then
              echo "Default route successfully set to $GW_ADDR via $INTF_NAME"
          else
              echo "ERROR: Failed to update default route"
              exit 1
          fi
    runcmd:
      - /usr/local/bin/install-routes-internal-gateway.sh
      - 'echo "*/5 * * * * sudo /usr/local/bin/install-routes-internal-gateway.sh" | sudo crontab -u root -'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-agent-routing-gateway
  namespace: skycluster-system
  labels:
    skycluster.io/managed-by: skycluster
    skycluster.io/script-type: cloud-init
    skycluster.io/script-target: agent-init
    skycluster.io/script-init: routing-gateway
data:
  cloud-init: |
    #cloud-config
    write_files:
      - path: /usr/local/bin/install-routes-gateway.sh
        owner: root:root
        permissions: '0755'
        content: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Redirect all output (stdout + stderr) to log file
          exec > >(tee -a /root/routing-gateway.logs) 2>&1

          GW_ADDR="__GW_ADDRESS__"

          # Check if GW_ADDR looks like an IP (basic validation)
          if ! [[ "$GW_ADDR" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
              echo "ERROR: Invalid gateway address: $GW_ADDR"
              exit 1
          fi

          # Caution: The route to the gateway returns the interface name as the third column
          # However, the route to the internet returns the interface name as the fifth column
          INTF_NAME=$(ip route get __GW_ADDRESS__ | awk '{print $3; exit}')
          if [[ -z "$INTF_NAME" ]]; then
              echo "ERROR: Could not determine interface for gateway $GW_ADDR"
              exit 1
          fi

          if sudo ip route replace default via "$GW_ADDR" dev "$INTF_NAME"; then
              echo "Default route successfully set to $GW_ADDR via $INTF_NAME"
          else
              echo "ERROR: Failed to update default route"
              exit 1
          fi
    runcmd:
      - /usr/local/bin/install-routes-gateway.sh
      - 'echo "*/5 * * * * sudo /usr/local/bin/install-routes-gateway.sh" | sudo crontab -u root -'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-agent-routing-init
  namespace: skycluster-system
  labels:
    skycluster.io/managed-by: skycluster
    skycluster.io/script-type: cloud-init
    skycluster.io/script-target: agent-init
    skycluster.io/script-init: routing-init
data:
  cloud-init: |
    #cloud-config
    write_files:
      - path: /usr/local/bin/install-routes.sh
        owner: root:root
        permissions: '0755'
        content: |
          #!/bin/bash
          echo "Setting iptables rules" >> /root/install-routes.log
          sudo ip route add 10.0.0.0/8 via __GW_ADDRESS__ > /dev/null 2>&1
          echo "Setting the mtu for main interface" >> /root/install-routes.log
    runcmd:
      - /usr/local/bin/install-routes.sh
      - 'echo "*/5 * * * * sudo /usr/local/bin/install-routes.sh" | sudo crontab -u root -'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-agent-etc-hosts
  namespace: skycluster-system
  labels:
    skycluster.io/managed-by: skycluster
    skycluster.io/script-type: cloud-init
    skycluster.io/script-target: agent-init
    skycluster.io/script-init: etc-hosts
data:
  cloud-init: |
    #cloud-config
    write_files:
      - path: /usr/local/bin/edit-hosts.sh
        owner: root:root
        permissions: '0755'
        content: |
          #!/bin/bash
          echo "Adding entries to /etc/hosts" >> /root/etc-hosts.log
          echo "__REGISTRYIP__ registry.skycluster.io" >> /etc/hosts
          echo "__DLSERVER__ dl.skycluster.io" >> /etc/hosts
    runcmd:
      - /usr/local/bin/edit-hosts.sh
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-agent-node-exporter
  namespace: skycluster-system
  labels:
    skycluster.io/managed-by: skycluster
    skycluster.io/script-type: cloud-init
    skycluster.io/script-target: agent-init
    skycluster.io/script-init: node-exporter
data:
  cloud-init: |
    #cloud-config
    write_files:
      - path: /etc/systemd/system/node_exporter.service
        owner: root:root
        permissions: '0644'
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          ExecStart=/usr/local/bin/node_exporter

          [Install]
          WantedBy=multi-user.target
      - path: /usr/local/bin/install-node-exporter.sh
        owner: root:root
        permissions: '0755'
        content: |
          #!/bin/bash
          echo "I've been run" >> /root/node-exporter-install.log
          install_node_exporter() {
            wget -q -P /root https://github.com/prometheus/node_exporter/releases/download/v1.9.1/node_exporter-1.9.1.linux-amd64.tar.gz
            if [ $? -eq 0 ]; then
              echo "Download succeeded" >> /root/node-exporter-install.log
              tar -zxvf /root/node_exporter-1.9.1.linux-amd64.tar.gz -C /root
              mv /root/node_exporter-1.9.1.linux-amd64/node_exporter /usr/local/bin/
              rm /root/node_exporter-1.9.1.linux-amd64.tar.gz
              rm -rf /root/node_exporter-1.9.1.linux-amd64
              return $?
            else
              echo "Download failed" >> /root/node-exporter-install.log
              return 1
            fi
          }
          # Loop until the installation succeeds
          until install_node_exporter; do
            echo "Installation failed, retrying..." >> /root/node-exporter-install.log
            sleep 5 # Wait for 5 seconds before retrying
          done
          echo "Installation Completed" >> /root/node-exporter-install.log
          systemctl daemon-reload
          systemctl enable --now node_exporter
          echo "Service activated" >> /root/node-exporter-install.log
    runcmd:
      - /usr/local/bin/install-node-exporter.sh
---
{{ end }}