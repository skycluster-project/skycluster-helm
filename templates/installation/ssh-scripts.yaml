
{{ if .Values.install }}
# This script is executed by remote-ssh controller 
# as a Command object on the target machine.
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-k3s-controller-check
  namespace: {{ .Values.namespaces.skycluster.name }}
  labels:
    skycluster.io/managed-by: skycluster
    skycluster.io/script-type: k3s-controller-check
data:
  statusCheckScript: |
    #!/bin/bash

    # exit status code:
    # 101: Resource is not ready yet

    if ! sudo kubectl config view --flatten > /dev/null 2>&1; then
      echo "kubeconfig file not generated!"
      # kubectl is not ready yet
      exit 101
    fi
    # Modify and encode the kubeconfig
    INTF_NAME=$(ip route get 8.8.8.8 | awk '{print $5; exit}')
    IP_ADDR=$(ip -o -4 addr show "$INTF_NAME" | awk '{print $4}' | cut -d/ -f1)
    encoded_kubeconfig=$(sudo kubectl config view --flatten | sed "s/127.0.0.1/$IP_ADDR/" | base64 -w0)
    file_path="/home/root/k3s/k3s.token.ip"
    if [ ! -f "$file_path" ]; then
      # the file is supposed to be created by the cloudinit script,
      # so if it's not found, it means the cloudinit script has not run yet
      echo "File not found!"
      exit 101
    fi
    file_content=$(cat "$file_path")
    semicolon_count=$(echo "$file_content" | grep -o ";" | wc -l)
    if [ "$semicolon_count" -eq 1 ]; then
      echo "${file_content};${encoded_kubeconfig}" > "/tmp/k3s.token.ip.kubeconfig"
      cat /tmp/k3s.token.ip.kubeconfig
    else
      echo "Resource is not ready yet!"
      exit 101
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-k3s-agent
  namespace: {{ .Values.namespaces.skycluster.name }}
  labels:
    skycluster.io/managed-by: skycluster
    skycluster.io/script-type: k3s-agent
data:
  initScript: |
    #!/bin/bash

    # exist codes:
    # 0: success
    # 1: not recoverable error, cannot proceed further and user intervention is required
    # 101: remote host is not ready yet, retry

    export USERNAME=$(whoami)
    export K3S_HOME=/home/${USERNAME}/k3s
    export INTF_NAME=$(ip route get 8.8.8.8 | awk '{print $5; exit}')
    export TOKEN=__K3STOKEN__
    export HOST=__K3SHOSTIP__

    mkdir -p $K3S_HOME
    mkdir -p $K3S_HOME/scripts
    mkdir -p $K3S_HOME/logs
    exec > "$K3S_HOME/logs/k3s-install-$(date +'%Y-%m-%d_%H-%M').log" 2>&1

    if ! ip -o -4 a show | grep -q "${INTF_NAME}"; then
      echo "Error: ${INTF_NAME} interface not found."
      exit 1
    fi
    echo "INFO: IP address of ${INTF_NAME} detected."

    if [ -z "${TOKEN}" ]; then
      echo "Error: ${TOKEN} not found."
      exit 1
    fi
    echo "INFO: K3S token detected."

    IPV4_REGEX='^([0-9]{1,3}\.){3}[0-9]{1,3}$'
    if ! echo "$HOST" | grep -qE "$IPV4_REGEX"; then
      echo "Error: $HOST is not a valid IPv4 address."
      exit 1
    fi
    echo "INFO: IP address is valid."

    # Create the script file
    cat << 'EOF' > $K3S_HOME/scripts/ping-and-install-agent.sh
    #!/bin/bash

    HOST_ACCESSIBLE=false
    RETRY_COUNT=0

    while [ "$HOST_ACCESSIBLE" = false ]; do
      ping -c 1 "$HOST" > /dev/null 2>&1
      if [ $? -eq 0 ]; then
        HOST_ACCESSIBLE=true
        echo "INFO: $HOST is accessible. Attempt $RETRY_COUNT"
      else
        echo "INFO: Attempt $(($RETRY_COUNT + 1)): $HOST is not accessible. Retrying..."
        RETRY_COUNT=$((RETRY_COUNT + 1))
        sleep 2
      fi
    done

    NODE_IP=`ip -o -4 a show ${INTF_NAME} | awk '{print $4}' | cut -d/ -f1`
    check_port() {
      nc -z $HOST 6443
      return $?
    }

    while true; do
      echo "INFO: Waiting for port 6443 on $HOST to open..."
      if check_port; then
          echo "INFO: Port 6443 on $HOST is open."
          break
      else
          echo "Port 6443 on $HOST is not open. Waiting..."
          sleep 3
      fi
    done

    max_retries=200
    retry_count=0
    install_success=false
    HOSTNAME=$(hostname)
    K3S_URL_FILE="https://dl.skycluster.io/k3s"
    K3S_BIN="/usr/local/bin"
    mkdir -p $K3S_BIN

    while [ "$install_success" = false ] && [ $retry_count -lt $max_retries ]; do
      echo "try to down load k3s from $K3S_URL_FILE... Attempt $(($retry_count + 1)) of $max_retries"
      if curl --max-time 80 -sfL --retry 3 -C - "$K3S_URL_FILE" -o "$K3S_BIN/k3s"; then 
        echo "INFO: Downloaded k3s binary"
        chmod +x "$K3S_BIN/k3s"
        echo "Installing k3s..."
        if curl -sfL https://get.k3s.io | K3S_URL=https://${HOST}:6443 \
          INSTALL_K3S_SKIP_DOWNLOAD=true \
          K3S_TOKEN=${TOKEN} \
          INSTALL_K3S_EXEC=" \
            --node-label skycluster.io/provider-name=__SKY_PROVIDERNAME__ \
            --node-label skycluster.io/provider-region=__SKY_PROVIDERREGION__ \
            --node-label skycluster.io/provider-zone=__SKY_PROVIDERZONE__ \
            --node-label skycluster.io/provider-identifier=__SKY_PROVIDERNAME__-__SKY_PROVIDERREGION__-__SKY_PROVIDERZONE__ \
            --node-label topology.kubernetes.io/zone=__SKY_PROVIDERNAME__-__SKY_PROVIDERREGION__-__SKY_PROVIDERZONE__ \
            --node-name ${HOSTNAME} \
            --node-ip ${NODE_IP}" sh -; then
          install_success=true
          break
        else
          echo "Installing k3s with attempt $(($retry_count + 1)) of $max_retries failed. Retrying..."
          retry_count=$(($retry_count + 1))
          sleep 5
        fi
      else
        echo "Downloading k3s Attempt $(($retry_count + 1)) of $max_retries failed. Retrying..."
        retry_count=$(($retry_count + 1))
        sleep 5
      fi
    done
    EOF

    chmod +x $K3S_HOME/scripts/ping-and-install-agent.sh

    SESSION_NAME="k3s-agent-install"
    echo "INFO: Creating new screen session $SESSION_NAME"
    screen -dmS $SESSION_NAME

    sleep 1
    echo "INFO: Executing the script in a screen session"
    # Execute the script in a screen session
    screen -S $SESSION_NAME -X stuff "bash $K3S_HOME/scripts/ping-and-install-agent.sh^M"
    exit 0
  statusCheckScript: |
    #!/bin/bash
    
    # exist codes:
    # 0: k3s is installed successfully
    # 1: not recoverable error, cannot proceed further and user intervention is required
    # 100: the resource does not exist
    # 101: remote host is not ready yet, retry

    SESSION_NAME="k3s-agent-install"
    # Check if an screen with name SESSION_NAME is running
    # TODO: Should improve this check by looking at running k3s process
    if ! screen -list | grep -q "$SESSION_NAME"; then
      echo "Error: The resource does not exist." >&2
      exit 100
    fi
    
    export USERNAME=$(whoami)
    export K3S_HOME=/home/${USERNAME}/k3s
    export INTF_NAME=$(ip route get 8.8.8.8 | awk '{print $5; exit}')
    export TOKEN=__K3STOKEN__
    export HOST=__K3SHOSTIP__

    if ! ip -o -4 a show | grep -q "${INTF_NAME}"; then
      echo "Error: ${INTF_NAME} interface not found." >&2
      exit 1
    fi
    echo "INFO: IP address of ${INTF_NAME} detected."
    
    if [ -z "${TOKEN}" ]; then
      echo "Error: ${TOKEN} not found." >&2
      exit 1
    fi
    echo "INFO: K3S token detected."
    
    IPV4_REGEX='^([0-9]{1,3}\.){3}[0-9]{1,3}$'
    if ! echo "$HOST" | grep -qE "$IPV4_REGEX"; then
      echo "Error: $HOST is not a valid IPv4 address." >&2
      exit 1
    fi
    echo "INFO: IP address is valid."

    echo "INFO: Waiting for remote $HOST to become accessible..."
    HOST_ACCESSIBLE=false
    MAX_RETRIES=5
    RETRY_COUNT=0
    while [ "$HOST_ACCESSIBLE" = false ] && [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
      ping -c 1 "$HOST" > /dev/null 2>&1
      if [ $? -eq 0 ]; then
        HOST_ACCESSIBLE=true
        echo "INFO: $HOST is accessible."
      else
        echo "INFO: Attempt $(($RETRY_COUNT + 1)) of $MAX_RETRIES: $HOST is not accessible. Retrying..." >&2
        RETRY_COUNT=$((RETRY_COUNT + 1))
        sleep 2
      fi
    done
    if [ "$HOST_ACCESSIBLE" = false ]; then
      echo "Error: Failed to access $HOST after $MAX_RETRIES attempts." >&2
      exit 101 # We need to wait, the resource is not ready yet
    fi

    max_retries=10
    retry_count=0
    HOSTNAME=$(hostname)
    NODE_IP=`ip -o -4 a show ${INTF_NAME} | awk '{print $4}' | cut -d/ -f1`

    check_port() {
      nc -z $HOST 6443
      return $?
    }

    PORT_ACCESSIBLE=false
    while [ $retry_count -lt $max_retries ]; do
        if check_port; then
            echo "INFO: Port 6443 on $HOST is open."
            PORT_ACCESSIBLE=true
            break
        else
            echo "Port 6443 on $HOST is not open. Waiting..." >&2
            sleep 2
        fi
    done
    if [ "$PORT_ACCESSIBLE" = false ]; then
        echo "Error: Failed to access port 6443 on $HOST after $max_retries attempts." >&2
        exit 101 # We need to wait, the resource is not ready yet
    fi

    retry_count=0
    install_success=false
    # Check if k3s is installed using kubectl command
    while [ $retry_count -lt $max_retries ]; do
      if systemctl is-active --quiet k3s-agent; then
        install_success=true
        break
      else
        echo "Attempt $(($retry_count + 1)) of $max_retries failed for k3s agent status. Retrying..." >&2
        retry_count=$(($retry_count + 1))
        sleep 2
      fi
    done

    if [ "$install_success" = false ]; then
      echo "Error: Failed to get status of k3s agent after $max_retries attempts." >&2
      exit 101
    fi
    echo "k3s is installed successfully."
    exit 0


{{ end }}